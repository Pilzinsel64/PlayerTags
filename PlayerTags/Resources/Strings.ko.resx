<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Loc_Static_PluginName" xml:space="preserve">
    <value>플레이어 태그</value>
  </data>
  <data name="Loc_Static_WarningMessage" xml:space="preserve">
    <value>이 플러그인은 네임태그 및 채팅을 수정할 수 있습니다. 해당 기능을 수정하는 다른 플러그인과 동시에 사용하면 예기치 못한 결과가 나올 수 있습니다. 플러그인 로드 순서에 따라 달라집니다.</value>
  </data>
  <data name="Loc_Static_General" xml:space="preserve">
    <value>기본</value>
  </data>
  <data name="Loc_Static_QuickTag" xml:space="preserve">
    <value>퀵 태그</value>
  </data>
  <data name="Loc_Static_TaggedPlayers" xml:space="preserve">
    <value>태그된 플레이어</value>
  </data>
  <data name="Loc_Static_PlayerName" xml:space="preserve">
    <value>플레이어</value>
  </data>
  <data name="Loc_Static_ContextMenu_AddTag" xml:space="preserve">
    <value>태그 추가: {0}</value>
  </data>
  <data name="Loc_Static_ContextMenu_RemoveTag" xml:space="preserve">
    <value>태그 지우기: {0}</value>
  </data>
  <data name="Loc_Static_Nameplates" xml:space="preserve">
    <value>네임태그</value>
  </data>
  <data name="Loc_Static_Format_AddTagToPlayer" xml:space="preserve">
    <value>추가 '{0}' 또는 {1}.</value>
  </data>
  <data name="Loc_IsSelected" xml:space="preserve">
    <value>선택됨</value>
  </data>
  <data name="Loc_IsExpanded" xml:space="preserve">
    <value>펼침</value>
  </data>
  <data name="Loc_IsCustomTagsContextMenuEnabled" xml:space="preserve">
    <value>상황에 맞는 메뉴 통합</value>
  </data>
  <data name="Loc_IsCustomTagsContextMenuEnabled_Description" xml:space="preserve">
    <value>플레이어에서 사용자 지정 태그를 추가 혹은 제거하기 위한 옵션을 상황에 맞는 메뉴에서 사용할 수 있습니다.</value>
  </data>
  <data name="Loc_IsShowInheritedPropertiesEnabled" xml:space="preserve">
    <value>상속 속성 표시</value>
  </data>
  <data name="Loc_IsShowInheritedPropertiesEnabled_Description" xml:space="preserve">
    <value>상위 노드에서 상속된 속성이 편집기에 표시됩니다.</value>
  </data>
  <data name="Loc_NameplateFreeCompanyVisibility" xml:space="preserve">
    <value>자유부대 표시</value>
  </data>
  <data name="Loc_NameplateFreeCompanyVisibility_Default" xml:space="preserve">
    <value>기본</value>
  </data>
  <data name="Loc_NameplateFreeCompanyVisibility_Default_Description" xml:space="preserve">
    <value>네임태그의 자유부대는 캐릭터가 자유부대에 속해 있을 때만 볼 수 있습니다.</value>
  </data>
  <data name="Loc_NameplateFreeCompanyVisibility_Never" xml:space="preserve">
    <value>안 보이게 하기</value>
  </data>
  <data name="Loc_NameplateFreeCompanyVisibility_Never_Description" xml:space="preserve">
    <value>자유부대를 보이지 않게 합니다.</value>
  </data>
  <data name="Loc_NameplateTitleVisibility" xml:space="preserve">
    <value>칭호 표시</value>
  </data>
  <data name="Loc_NameplateTitleVisibility_Always" xml:space="preserve">
    <value>항상 표시</value>
  </data>
  <data name="Loc_NameplateTitleVisibility_Always_Description" xml:space="preserve">
    <value>네임태그의 칭호는 캐릭터에게 칭호가 없는 경우에도 볼 수 있습니다.</value>
  </data>
  <data name="Loc_NameplateTitleVisibility_Default" xml:space="preserve">
    <value>기본</value>
  </data>
  <data name="Loc_NameplateTitleVisibility_Never" xml:space="preserve">
    <value>안 보이게 하기</value>
  </data>
</root>